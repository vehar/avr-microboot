# Name: Makefile
# Project: AVRUSBBoot
# Modified by: Thomas Fischl
# Modified: 2006-06-25

# Original file by: Christian Starkjohann
# Creation Date: 2004-12-29
# Tabsize: 4
# Copyright: (c) 2005 by OBJECTIVE DEVELOPMENT Software GmbH
# License: Proprietary, free under certain conditions. See Documentation.
# This Revision: $Id: Makefile 147 2006-03-01 17:33:03Z cs $

BOOTLOADER_ADDRESS = 1800
MCU=atmega8
F_CPU=16000000

LDFLAGS += -Wl,--section-start=.text=$(BOOTLOADER_ADDRESS)
LDFLAGS += -T avr4.x
CFLAGS += -Wall -Os -mmcu=$(MCU) -DF_CPU=$(F_CPU) -DBOOTLOADER_ADDRESS=0x$(BOOTLOADER_ADDRESS)
CFLAGS += -funsigned-bitfields -fpack-struct -fshort-enums 
#CFLAGS+=-Wl,-relax -ffreestanding -fomit-frame-pointer 
CFLAGS+=-Wl,-relax -fomit-frame-pointer 
CFLAGS+=-fno-tree-scev-cprop -fno-strict-aliasing 
#CFLAGS+=-fwhole-program
CFLAGS+= -Wl,-gc-sections -ffunction-sections -fdata-sections -mcall-prologues
CFLAGS+=-fno-move-loop-invariants -fno-inline-small-functions

SERIAL = `echo /dev/tty.KeySerial*`
UISP = uisp -dprog=avr910 -dserial=$(SERIAL) -dpart=auto
# The two lines above are for "uisp" and the AVR910 serial programmer connected
# to a Keyspan USB to serial converter to a Mac running Mac OS X.
# Choose your favorite programmer and interface.

COMPILE = avr-gcc $(CFLAGS)  -Iusbdrv -I. 
#-DDEBUG_LEVEL=2
# NEVER compile the final product with debugging! Any debug output will
# distort timing so that the specs can't be met.

OBJECTS = usbdrv/usbdrv.o usbdrv/usbdrvasm.o main.o
# Note that we link usbdrv.o first! This is required for correct alignment of
# driver-internal global variables!


# symbolic targets:

TARGETS= main.hex main.bin main.S real.bin bootupdate.bin

all:	$(TARGETS)

.c.o:
	$(COMPILE) -c $< -o $@

.S.o:
	$(COMPILE) -x assembler-with-cpp -c $< -o $@
# "-x assembler-with-cpp" should not be necessary since this is the default
# file type for the .S (with capital S) extension. However, upper case
# characters are not always preserved on Windows. To ensure WinAVR
# compatibility define the file type manually.

.c.s:
	$(COMPILE) -S $< -o $@

flash:	all
	$(UISP) --erase --upload --verify if=main.hex

avrdude: 
	avrdude -c avr910 -p atmega8 -U flash:w:main.hex

# Fuse low byte:
# 0xef = 1 1 1 0   1 1 1 1
#        ^ ^ \+/   \--+--/
#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)
#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)
#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)
#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)
#
# Fuse high byte:
# 0xdb = 1 1 0 1   1 0 1 1
#        ^ ^ ^ ^   \-+-/ ^
#        | | | |     |   +---- RSTDISBL (disable external reset -> enabled)
#        | | | |     +-------- BODLEVEL 2..0 (brownout trigger level -> 2.7V)
#        | | | +-------------- WDTON (watchdog timer always on -> disable)
#        | | +---------------- SPIEN (enable serial programming -> enabled)
#        | +------------------ EESAVE (preserve EEPROM on Chip Erase -> not preserved)
#        +-------------------- DWEN (debug wire enable)
fuse_tiny2313:	# only needed for attiny2313
	$(UISP) --wr_fuse_l=0xef --wr_fuse_h=0xdb


clean:
	rm -f main.lst main.obj main.cof main.list main.map main.eep.hex *.o usbdrv/*.o main.s usbdrv/oddebug.s usbdrv/usbdrv.s\
		$(TARGETS)

# file targets:
main.elf:	$(OBJECTS)
	$(COMPILE) -o main.elf $(OBJECTS) $(LDFLAGS)

main.S:	$(OBJECTS)
	$(COMPILE) -o main.S -S -fverbose-asm main.c

main.bin:	main.elf
	rm -f main.bin
	avr-objcopy -j .text -j .data -O binary main.elf main.bin


main.hex:	main.elf
	rm -f main.hex main.eep.hex
	avr-objcopy -j .text -j .data -O ihex main.elf main.hex
	./checksize main.elf
# do the checksize script as our last action to allow successful compilation
# on Windows with WinAVR where the Unix commands will fail.

dummy.bin: 0xff
	./0xff |dd of=dummy.bin bs=1 count=$$(( 0x$(BOOTLOADER_ADDRESS) ))

real.bin: dummy.bin main.bin
	cat dummy.bin main.bin >real.bin
	rm -f dummy.bin

0xff: 0xff.c
	gcc -o 0xff 0xff.c

bin2h: bin2h.c
	gcc -o bin2h bin2h.c

bootupdate.elf: main.bin bootupdate.c bin2h
	./bin2h <main.bin >bootimage.h
	$(COMPILE) -o bootupdate.elf bootupdate.c

bootupdate.bin:	bootupdate.elf
	rm -f bootupdate.bin
	avr-objcopy -j .text -j .data -O binary bootupdate.elf bootupdate.bin


disasm:	main.bin
	avr-objdump -d main.bin

cpp:
	$(COMPILE) -E main.c
